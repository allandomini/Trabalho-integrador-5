// src/app/components/task-dialog/task-dialog.component.ts
import { Component, Inject } from '@angular/core';
import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';
import { MAT_DIALOG_DATA, MatDialogRef, MatDialogModule } from '@angular/material/dialog';
import { MatButtonModule } from '@angular/material/button';
import { MatInputModule } from '@angular/material/input';
import { MatFormFieldModule } from '@angular/material/form-field';
import { MatSelectModule } from '@angular/material/select';
import { MatDatepickerModule } from '@angular/material/datepicker';
import { MatNativeDateModule } from '@angular/material/core';
import { MatCheckboxModule } from '@angular/material/checkbox';
import { MatIconModule } from '@angular/material/icon';
import { MatListModule } from '@angular/material/list';
import { Task } from '../../models/task';
import { Subtask } from '../../models/subtask';

@Component({
  selector: 'app-task-dialog',
  standalone: true,
  imports: [
    CommonModule,
    FormsModule,
    MatDialogModule,
    MatButtonModule,
    MatInputModule,
    MatFormFieldModule,
    MatSelectModule,
    MatDatepickerModule,
    MatNativeDateModule,
    MatCheckboxModule,
    MatIconModule,
    MatListModule
  ],
  template: `
    <h2 mat-dialog-title>{{ data.id ? 'Edit Task' : 'Create New Task' }}</h2>

    <div mat-dialog-content>
      <form>
        <mat-form-field appearance="fill" class="full-width">
          <mat-label>Title</mat-label>
          <input matInput [(ngModel)]="data.title" name="title" required>
        </mat-form-field>

        <mat-form-field appearance="fill" class="full-width">
          <mat-label>Description</mat-label>
          <textarea matInput [(ngModel)]="data.description" name="description" rows="3"></textarea>
        </mat-form-field>

        <mat-form-field appearance="fill">
          <mat-label>Status</mat-label>
          <mat-select [(ngModel)]="data.status" name="status">
            <mat-option value="todo">To Do</mat-option>
            <mat-option value="doing">Doing</mat-option>
            <mat-option value="done">Done</mat-option>
          </mat-select>
        </mat-form-field>

        <mat-form-field appearance="fill">
          <mat-label>Due Date</mat-label>
          <input matInput [matDatepicker]="picker" [(ngModel)]="data.dueDate" name="dueDate">
          <mat-datepicker-toggle matSuffix [for]="picker"></mat-datepicker-toggle>
          <mat-datepicker #picker></mat-datepicker>
        </mat-form-field>

        <div class="favorite-toggle">
          <mat-checkbox [(ngModel)]="data.isFavorite" name="isFavorite">Mark as favorite</mat-checkbox>
        </div>

        <div class="subtasks-section">
          <h3>Subtasks</h3>
          
          <div class="subtask-list">
            <mat-list>
              <mat-list-item *ngFor="let subtask of data.subtasks; let i = index">
                <mat-checkbox [(ngModel)]="subtask.isCompleted" name="subtask{{i}}"
                  (change)="toggleSubtaskComplete(subtask)">
                  {{ subtask.title }}
                </mat-checkbox>
                <button mat-icon-button color="warn" (click)="removeSubtask(i)">
                  <mat-icon>delete</mat-icon>
                </button>
              </mat-list-item>
            </mat-list>
          </div>

          <div class="add-subtask">
            <mat-form-field appearance="outline" class="subtask-input">
              <mat-label>New subtask</mat-label>
              <input matInput [(ngModel)]="newSubtask" name="newSubtask" placeholder="Add a subtask"
                (keydown.enter)="addSubtask(); $event.preventDefault()">
            </mat-form-field>
            <button mat-mini-fab color="primary" (click)="addSubtask()">
              <mat-icon>add</mat-icon>
            </button>
          </div>
        </div>
      </form>
    </div>

    <div mat-dialog-actions align="end">
      <button mat-button (click)="onCancelClick()">Cancel</button>
      <button mat-raised-button color="primary" (click)="onSaveClick()" [disabled]="!data.title">Save</button>
    </div>
  `,
  styleUrl: './task-dialog.component.scss'
})
export class TaskDialogComponent {
  newSubtask: string = '';

  constructor(
    public dialogRef: MatDialogRef<TaskDialogComponent>,
    @Inject(MAT_DIALOG_DATA) public data: Task
  ) { }

  addSubtask(): void {
    if (this.newSubtask.trim()) {
      if (!this.data.subtasks) {
        this.data.subtasks = [];
      }
      
      this.data.subtasks.push({
        id: '', // Will be generated by backend
        taskId: this.data.id || '',
        title: this.newSubtask,
        isCompleted: false,
        createdAt: new Date(),
        updatedAt: new Date()
      });
      
      this.newSubtask = '';
    }
  }

  removeSubtask(index: number): void {
    this.data.subtasks.splice(index, 1);
  }

  toggleSubtaskComplete(subtask: Subtask): void {
    subtask.isCompleted = !subtask.isCompleted;
  }

  onCancelClick(): void {
    this.dialogRef.close();
  }

  onSaveClick(): void {
    this.dialogRef.close(this.data);
  }
}